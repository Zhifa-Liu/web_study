1.JS 对象

创建 JS 对象：
(1)
person=new Object();
person.firstname="John";
person.lastname="Doe";
person.age=50;
person.eyecolor="blue";
(2)
function person(firstname,lastname,age,eyecolor)
{
    this.firstname=firstname;
    this.lastname=lastname;
    this.age=age;
    this.eyecolor=eyecolor;
}
var myFather=new person("John","Doe",50,"blue");
已存在的对象构造器中是不能通过赋值添加新的属性(需要在构造器函数中添加):person.nationality = "English";


2.JS 原型对象(prototype)

JavaScript 对象有一个指向一个原型对象的链，
当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，
以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾;

所有的 JavaScript 对象都会从一个 prototype(原型对象)中继承属性和方法：
    Date 对象从 Date.prototype 继承;
    Array 对象从 Array.prototype 继承;
    Person 对象从 Person.prototype 继承;
所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例;

使用 prototype 属性就可以给对象的构造函数添加新的属性:person.prototype.nationality = "English";


3.JS Number 对象

JavaScript 不是类型语言: 与许多其他编程语言不同，JavaScript 不定义不同类型的数字，比如整数、短、长、浮点等等;
JavaScript数字不分为整数类型和浮点型类型，所有的数字都是浮点型;

无穷大：
当数字运算结果超过了JavaScript所能表示的数字上限（溢出），结果为一个特殊的无穷大(infinity)值，在JavaScript中以Infinity表示;
同样地，当负数的值超过了JavaScript所能表示的负数范围，结果为负无穷大，在JavaScript中以-Infinity表示;
无穷大值的行为特性和我们所期望的是一致的：基于它们的加、减、乘和除运算结果还是无穷大(当然还保留它们的正负号);

NaN - 非数字值:NaN 属性是代表非数字值的特殊值，该属性用于指示某个值不是数字

4.JS 字符串 对象
5.JS Date 对象

创建日期：
Date 对象用于处理日期和时间;
通过 new 关键词来定义 Date 对象;
创建Date对象并初始化日期的四种方式:
new Date() // 当前日期和时间
new Date(milliseconds)  //从 1970 年 1 月 1 日至今的毫秒数
new Date(dateString)
new Date(year, month, day, hours, minutes, seconds, milliseconds)

设置日期：
通过使用针对日期对象的方法，可以很容易地对日期进行操作;
为日期对象设置了一个特定的日期 (2010 年 1 月 14 日)：
var myDate=new Date();
myDate.setFullYear(2010,0,14);
将日期对象设置为 5 天后的日期：
var myDate=new Date();
myDate.setDate(myDate.getDate()+5);
注意: 如果增加天数会改变月份或者年份，那么日期对象会自动完成这种转换。

日期对象可用于比较两个日期;

6.JS Array 对象

数组对象：使用单独的变量名来存储一系列的值。

创建数组：
(1)
var myCars=new Array();
myCars[0]="Saab";
myCars[1]="Volvo";
myCars[2]="BMW";
(2)
var myCars=new Array("Saab","Volvo","BMW");
(3)
var myCars=["Saab","Volvo","BMW"];

由于所有的JavaScript变量(函数、数组)都是对象, 且数组元素是对象，因此JS数组元素可涵盖不同的变量类型;

创建新方法：
Array.prototype.myUcase=function(){
    for (i=0;i<this.length;i++){
        this[i]=this[i].toUpperCase();
    }
}

7.JS Boolean 对象

Boolean(布尔)对象用于将非布尔值转换为布尔值(true 或者 false)。

创建Boolean对象：
Boolean 对象代表两个值:"true" 或者 "false"
下面的代码定义了一个名为 myBoolean 的布尔对象：
var myBoolean=new Boolean();
如果布尔对象无初始值或者其值为:0、-0、null、""、false、undefined、NaN，
那么对象的值为 false; 否则，其值为 true (即使当变量值为字符串 "false" 时)！

8.JS Math 对象

Math（算数）对象的作用是：执行普通的算数任务;

Math 对象提供多种算数值类型和函数, 无需在使用这个对象之前对它进行定义;

JavaScript 提供 8 种可被 Math 对象访问的算数值：
Math.E、Math.PI、Math.SQRT2、Math.SQRT1_2、Math.LN2、Math.LN10、Math.LOG2E、Math.LOG10E

9.JS RegExp 对象

RegExp：是正则表达式（regular expression）的简写;

正则表达式描述了字符的模式对象;
当您检索某个文本时，可以使用一种模式来描述要检索的内容，RegExp 就是这种模式;
简单的模式可以是一个单独的字符，更复杂的模式包括了更多的字符，并可用于解析、格式检查、替换等等。

创建RegExp对象：//模式描述了一个表达式模型，修饰符(modifiers)描述了检索是否是全局，区分大小写等。
var patt=new RegExp(pattern,modifiers);
var patt=/pattern/modifiers;
当使用构造函数创造正则对象时，需要常规的字符转义规则(在前面加反斜杠 \):
var re = new RegExp("\\w+");
var re = /\w+/;

RegExp 修饰符：
修饰符用于执行不区分大小写和全文的搜索。
i - 修饰符是用来执行不区分大小写的匹配。
g - 修饰符是用于执行全文的搜索(而不是在找到第一个就停止查找,而是找到所有的匹配)。

test():搜索字符串指定的值，根据结果并返回真或假;
exec():检索字符串中的指定值，返回值是被找到的值;如果没有发现匹配，则返回 null。

