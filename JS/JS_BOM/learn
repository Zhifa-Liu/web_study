浏览器对象模型 (Browser Object Model (BOM))

1.Window
1.1 Window对象:
所有浏览器都支持 window 对象, 表示浏览器窗口;
所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员;
全局变量是 window 对象的属性, 全局函数是 window 对象的方法;
甚至 HTML DOM 的 document 也是 window 对象的属性之一：
window.document.getElementById("header");(document.getElementById("header");)
1.2 Window尺寸：
确定浏览器窗口的尺寸的三种方法：
对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari：
    window.innerHeight - 浏览器窗口的内部高度(包括滚动条)
    window.innerWidth - 浏览器窗口的内部宽度(包括滚动条)
对于 Internet Explorer 8、7、6、5：
    document.documentElement.clientHeight
    document.documentElement.clientWidth
或者
    document.body.clientHeight
    document.body.clientWidth
1.3 其它Window方法：
window.open() - 打开新窗口
window.close() - 关闭当前窗口
window.moveTo() - 移动当前窗口
window.resizeTo() - 调整当前窗口的尺寸

2.Window Screen
window.screen 对象包含有关用户屏幕的信息;
window.screen对象在编写时可以不使用 window 这个前缀:
    screen.availWidth - 可用的屏幕宽度(screen.availWidth 属性返回访问者屏幕的宽度，以像素计，减去界面特性，比如窗口任务栏)
    screen.availHeight - 可用的屏幕高度(screen.availHeight 属性返回访问者屏幕的高度，以像素计，减去界面特性，比如窗口任务栏。)

3.Window Location
window.location 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面;
window.location 对象在编写时可不使用 window 这个前缀:
    location.href 属性返回当前页面的 URL
    location.hostname 返回 web 主机的域名
    location.pathname 返回当前页面的路径和文件名
    location.port 返回 web 主机的端口(80 或 443)
    location.protocol 返回所使用的 web 协议(http: 或 https:)

    location.assign() 方法加载新的文档

4.Window History
window.history 对象包含浏览器的历史；
window.history对象在编写时可不使用 window 这个前缀；

history.back() - 加载历史列表中的前一个 URL，与在浏览器点击后退按钮相同
history.forward() - 加载历史列表中的下一个 URL，与在浏览器中点击向前按钮相同

除此之外可以用 history.go() 这个方法来实现向前，后退的功能。
function a(){
    history.go(1);  // go() 里面的参数表示跳转页面的个数 例如 history.go(1) 表示前进一个页面
}
function b(){
    history.go(-1);  // go() 里面的参数表示跳转页面的个数 例如 history.go(-1) 表示后退一个页面
}

5.Window Navigator
window.navigator 对象包含有关访问者浏览器的信息;
window.navigator 对象在编写时可不使用 window 这个前缀;

来自 navigator 对象的信息具有误导性，不应该被用于检测浏览器版本，这是因为：
    navigator 数据可被浏览器使用者更改
    一些浏览器对测试站点会识别错误
    浏览器无法报告晚于浏览器发布的新操作系统

浏览器检测：
由于 navigator 可误导浏览器检测，使用对象检测可用来嗅探不同的浏览器。
由于不同的浏览器支持不同的对象，您可以使用对象来检测浏览器。
例如，由于只有 Opera 支持属性 "window.opera"，您可以据此识别出 Opera。

6.JavaScript 计时事件
通过使用 JavaScript，我们有能力做到在一个设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行，我们称之为计时事件。

在 JavaScritp 中使用计时事件是很容易的，两个关键方法是:
setInterval() - 间隔指定的毫秒数不停地执行指定的代码。
setTimeout() - 在指定的毫秒数后执行指定代码。

7.JavaScript Cookie

Cookie 是一些数据, 用于存储 web 页面的用户信息, 它存储于电脑上的文本文件中;
当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息;
Cookie 的作用就是用于解决 "如何记录客户端的用户信息":
当用户访问 web 页面时，他的名字可以记录在 cookie 中;
在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录;
Cookie 以名/值对形式存储，如下所示:
username=John Doe
当浏览器从服务器上请求 web 页面时， 属于该页面的 cookie 会被添加到该请求中, 服务端通过这种方式来获取用户的信息。

JavaScript 可以使用 document.cookie 属性来创建 、读取、及删除 cookie：
创建 cookie:
    document.cookie="username=John Doe";
    可以为 cookie 添加一个过期时间（以 UTC 或 GMT 时间），默认情况下，cookie 在浏览器关闭时删除：
    document.cookie="username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT";
    可以使用 path 参数告诉浏览器 cookie 的路径，默认情况下，cookie 属于当前页面：
    document.cookie="username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/";
读取 cookie:
    var x = document.cookie;
修改 cookie:
    修改 cookie 类似于创建 cookie，如下所示：
    document.cookie="username=John Smith; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/";
删除 cookie：
    删除 cookie 非常简单。您只需要设置 expires 参数为以前的时间即可，如下所示，设置为 Thu, 01 Jan 1970 00:00:00 GMT:
    document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 GMT";
    注意，当您删除时不必指定 cookie 的值。

查找一个指定 cookie 值，您必须创建一个JavaScript 函数在 cookie 字符串中查找 cookie 值
