1. HTML5简介
HTML5 是下一代 HTML 标准; 设计目的是为了在移动设备上支持多媒体。
<!doctype> 声明必须位于 HTML5 文档中的第一行，使用非常简单: <!DOCTYPE html>


2. HTML5浏览器支持
现代的浏览器都支持 HTML5;
此外，所有浏览器，包括旧的和最新的，对无法识别的元素会作为内联元素自动处理;
2.1 HTML5 元素定义为块元素
HTML5 定了8个新的 HTML 语义(semantic)元素，所有这些元素都是 块级 元素;
为了能让旧版本的浏览器正确显示这些元素，你可以设置 CSS 的 display 属性值为 block:
header, section, footer, aside, nav, main, article, figure {
    display: block;
}
2.2 为HTML添加新元素
JavaScript 语句 document.createElement("element_name") 是为 IE 浏览器添加新的元素。
2.3 Internet Explorer 浏览器问题
(1)可以使用以上的方法来为 IE 浏览器添加 HTML5 元素，但是: ！Internet Explorer 8 及更早 IE 版本的浏览器不支持以上的方式;
(2)可以使用Sjoerd Visscher创建的 "HTML5 Enabling JavaScript", "shiv" 来解决该问题:
<!--[if lt IE 9]>
  <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->
注意：国内用户请使用本站静态资源库(Google 资源库在国内不稳定)：
<!--[if lt IE 9]>
  <script src="http://cdn.static.runoob.com/libs/html5shiv/3.7/html5shiv.min.js"></script>
<![endif]-->
html5shiv.js 引用代码必须放在 <head> 元素中，因为 IE 浏览器在解析 HTML5 新元素时需要先加载该文件。
(3)针对IE浏览器html5shiv是比较好的解决方案;
html5shiv主要解决HTML5提出的新的元素不被IE6-8识别，这些新元素不能作为父节点包裹子元素，并且不能应用CSS样式。
3. HTML5 Canvas
3_canvas.html


4. HTML5 内联SVG
4.1 什么是SVG？
SVG 指可伸缩矢量图形 (Scalable Vector Graphics)
SVG 用于定义用于网络的基于矢量的图形
SVG 使用 XML 格式定义图形
SVG 图像在放大或改变尺寸的情况下其图形质量不会有损失
SVG 是万维网联盟的标准
4.2 SVG优势
与其他图像格式相比（比如 JPEG 和 GIF），使用 SVG 的优势在于：
SVG 图像可通过文本编辑器来创建和修改
SVG 图像可被搜索、索引、脚本化或压缩
SVG 是可伸缩的
SVG 图像可在任何的分辨率下被高质量地打印
SVG 可在图像质量不下降的情况下被放大
4.3 SVG与Canvas两者间的区别
SVG 是一种使用 XML 描述 2D 图形的语言;
Canvas 通过 JavaScript 来绘制 2D 图形;
SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的，您可以为某个元素附加 JavaScript 事件处理器;
在 SVG 中，每个被绘制的图形均被视为对象; 如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。
Canvas 是逐像素进行渲染的;
在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。
如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。


5. HTML5 MathML
MathML 是数学标记语言，是一种基于XML(标准通用标记语言的子集)的标准，用来在互联网上书写数学符号和公式的置标语言。
HTML5 可以在文档中使用 MathML 元素，对应的标签是 <math>...</math> 。


6. HTML5 拖放
拖放是一种常见的特性，即抓取对象以后拖到另一个位置;
在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放;
<div id="div_1" ondrop="drop(event)" ondragover="allowDrop(event)"></div>
<img id="drag_1" src="/images/logo.png" draggable="true" ondragstart="drag(event)" width="336" height="69">
(1)设置元素为可拖放:
<img draggable="true">
(2)拖动什么 - ondragstart 和 setData()
ondragstart 属性调用了一个函数，drag(event)，它规定了被拖动的数据;
dataTransfer.setData() 方法设置被拖数据的数据类型和值:
function drag(ev)
{
    ev.dataTransfer.setData("Text",ev.target.id);
}
Text 是一个 DOMString 表示要添加到 drag object 的拖动数据的类型, 值是可拖动元素的 id ("drag_1")。
(3)放到何处 - ondragover
ondragover 事件规定在何处放置被拖动的数据;
默认地，无法将数据/元素放置到其他元素中; 如果需要设置允许放置，我们必须阻止对元素的默认处理方式。
这要通过调用 ondragover 事件的 event.preventDefault() 方法：
event.preventDefault()
(4)进行放置 - ondrop
当放置被拖数据时，会发生 drop 事件;
在上面的例子中，ondrop 属性调用了一个函数，drop(event)：
function drop(ev)
{
    ev.preventDefault();//调用 preventDefault() 来避免浏览器对数据的默认处理(drop 事件的默认行为是以链接形式打开)
    var data=ev.dataTransfer.getData("Text");
    ev.target.appendChild(document.getElementById(data));
}


7. HTML5 地理位置
HTML5 Geolocation API 用于获得用户的地理位置;
鉴于该特性可能侵犯用户的隐私，除非用户同意，否则用户位置信息是不可用的;


8. HTML5 Video/Audio
(1)Video
HTML5 规定了一种通过 video 元素来包含视频的标准方法:
<video width="320" height="240" controls>
  <source src="movie.mp4" type="video/mp4">
  <source src="movie.ogg" type="video/ogg">
  您的浏览器不支持Video标签!
</video>
<video> 元素提供了播放、暂停和音量控件来控制视频;
<video> 元素提供了 width 和 height 属性控制视频的尺寸;
<video> 与</video> 标签之间插入的内容是提供给不支持 video 元素的浏览器显示的;
<video> 元素支持多个 <source> 元素. <source> 元素可以链接不同的视频文件，浏览器将使用第一个可识别的格式。
(2)Audio
HTML5 提供了播放音频文件的标准:
<audio controls>
  <source src="horse.ogg" type="audio/ogg">
  <source src="horse.mp3" type="audio/mpeg">
  您的浏览器不支持 audio 元素!
</audio>
controls 属性供添加播放、暂停和音量控件;
在<audio> 与 </audio> 之间你需要插入浏览器不支持的<audio>元素的提示文本;
<audio> 元素允许使用多个 <source> 元素. <source> 元素可以链接不同的音频文件，浏览器将使用第一个支持的音频文件。


9. HTML5 Web 存储
HTML5 web 存储是一个比cookie更好的本地存储方式;
(1)什么是 HTML5 Web 存储?
使用HTML5可以在本地存储用户的浏览数据;
早些时候,本地存储使用的是 cookie; 但是Web 存储需要更加的安全与快速。
这些数据不会被保存在服务器上，这些数据只用于用户请求网站数据上; 它也可以存储大量的数据，而不影响网站的性能。
数据以 键/值 对存在, web网页的数据只允许该网页访问使用。
(2)localStorage 和 sessionStorage
客户端存储数据的两个对象为：
localStorage - 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去除。
sessionStorage - 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。
不管是 localStorage，还是 sessionStorage，可使用的API都相同，常用的有如下几个(以localStorage为例)：
保存数据：localStorage.setItem(key,value);
读取数据：localStorage.getItem(key);
删除单个数据：localStorage.removeItem(key);
删除所有数据：localStorage.clear();
得到某个索引的key：localStorage.key(index);


10. HTML5 Web SQL
Web SQL 数据库 API 并不是 HTML5 规范的一部分，但是它是一个独立的规范，引入了一组使用 SQL 操作客户端数据库的 APIs;
以下是规范中定义的三个核心方法：
(1)openDatabase：这个方法使用现有的数据库或者新建的数据库创建一个数据库对象。
(2)transaction：这个方法让我们能够控制一个事务，以及基于这种情况执行提交或者回滚。
(3)executeSql：这个方法用于执行实际的 SQL 查询。


11. HTML5 应用程序缓存
HTML5 引入了应用程序缓存，这意味着 web 应用可进行缓存，并可在没有因特网连接时进行访问。
11.1 应用程序缓存为应用带来三个优势：
(1)离线浏览 - 用户可在应用离线时使用它们
(2)速度 - 已缓存资源加载得更快
(3)减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源。
11.2 Cache Manifest 基础
如需启用应用程序缓存，请在文档的<html> 标签中包含 manifest 属性：
<!DOCTYPE HTML>
<html manifest="demo.appcache">
...
</html>
每个指定了 manifest 的页面在用户对其访问时都会被缓存;
如果未指定 manifest 属性，则页面不会被缓存(除非在 manifest 文件中直接指定了该页面);
建议 manifest 文件的文件扩展名是：".appcache"。
(!!!请注意，manifest 文件需要配置正确的 MIME-type，即 "text/cache-manifest"(必须在 web 服务器上进行配置))
11.3 Manifest 文件
manifest 文件是简单的文本文件，它告知浏览器被缓存的内容(以及不缓存的内容)。
manifest 文件可分为三个部分：
CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存;
NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存;
FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面(比如 404 页面);
(1)CACHE MANIFEST
第一行，CACHE MANIFEST，是必需的：
CACHE MANIFEST
/theme.css
/logo.gif
/main.js
上面的 manifest 文件列出了三个资源：一个 CSS 文件，一个 GIF 图像，以及一个 JavaScript 文件。
当 manifest 文件加载后，浏览器会从网站的根目录下载这三个文件。然后，无论用户何时与因特网断开连接，这些资源依然是可用的。
(2)NETWORK
下面的 NETWORK 小节规定文件 "login.php" 永远不会被缓存，且离线时是不可用的：
NETWORK:
login.php
可以使用星号来指示所有其他资源/文件都需要因特网连接：
NETWORK:
*
(3)FALLBACK
下面的 FALLBACK 小节规定如果无法建立因特网连接，则用 "offline.html" 替代 /html5/ 目录中的所有文件：
FALLBACK:
/html/ /offline.html
注意: 第一个 URI 是资源，第二个是替补。
(4)更新缓存
一旦应用被缓存，它就会保持缓存直到发生下列情况：
用户清空浏览器缓存;
manifest 文件被修改(参阅下面的提示);
由程序来更新应用缓存;

完整的 Manifest 文件:
/******/
CACHE MANIFEST
# 2012-02-21 v1.0.0
/theme.css
/logo.gif
/main.js

NETWORK:
login.php

FALLBACK:
/html/ /offline.html
/******/
提示:以 "#" 开头的是注释行，但也可满足其他用途。应用的缓存会在其 manifest 文件更改时被更新。
如果您编辑了一幅图片，或者修改了一个 JavaScript 函数，这些改变都不会被重新缓存。
更新注释行中的日期和版本号是一种使浏览器重新缓存文件的办法。

一旦文件被缓存，则浏览器会继续展示已缓存的版本，即使您修改了服务器上的文件; 为了确保浏览器更新缓存，您需要更新 manifest 文件。


12. HTML5 Web Workers
12.1 什么是 Web Workers
当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成;
web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能，
您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行;
12.2 检测浏览器是否支持 Web Workers
if(typeof(Worker)!=="undefined")
{
    //  支持 Web worker!
    // 一些代码.....
}
else
{
    //抱歉! Web Worker 不支持
}


